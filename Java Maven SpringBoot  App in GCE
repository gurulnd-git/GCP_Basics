// Login in as root user
sudo su -
// Upate Software
apt update  /  apt-get update

// Install Java 
apt install openjdk-8-jdk openjdk-8-jre
// Verify Java version
java -version
// Set ENV Variables
cat >> /etc/environment <<EOL
JAVA_HOME= /usr/lib/jvm/java-8-openjdk-amd64
JRE_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre
EOL

// Install Tomcat
wget http://apachemirror.wuchna.com/tomcat/tomcat-9/v9.0.27/bin/apache-tomcat-9.0.27.tar.gz
tar xzf apache-tomcat-9.0.27.tar.gz
mv apache-tomcat-9.0.27 /usr/local/apache-tomcat9
// Set ENV Variables
echo "export CATALINA_HOME="/usr/local/apache-tomcat9"" >> ~/.bashrc
source ~/.bashrc
// Starting Tomcat Server
cd /usr/local/apache-tomcat9
chmod +x ./bin/startup.sh
./bin/startup.sh

// Install Lynx Browser 
apt-get install lynx
// Testing Tomcat
lynx http://localhost:8080

// Install Maven
cd /usr/local
wget http://www-eu.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz
tar xzf apache-maven-3.6.2-bin.tar.gz
ln -s apache-maven-3.6.2 apache-maven
// Configure maven
vi /etc/profile.d/apache-maven.sh
export M2_HOME=/usr/local/apache-maven
export MAVEN_HOME=/usr/local/apache-maven
export PATH=${M2_HOME}/bin:${PATH}
// :q :w :x 
source /etc/profile.d/apache-maven.sh
// Verify
mvn -version

// Install Git
apt install git-all

// Clone Spring Boot App
git clone https://github.com/gurulnd-git/gae-standard-example.git
./mvnw clean install
cd target/
mv demo-0.0.1-SNAPSHOT.war /usr/local/apache-tomcat9/webapps
cd /usr/local/apache-tomcat9/bin
./catalina.sh jpda start

// Test App inside VM
lynx http://localhost:8080/demo-0.0.1-SNAPSHOT


-----------------------------------------------------------------------------------
Other ways

https://cgrant.io/tutorials/gcp/compute/gce/how-to-deploy-a-java-application-to-google-compute-engine/
// spring-start.sh
#!/bin/bash

# Borrowed from https://gist.github.com/spencergibb/99371671cacf0ee84b7a
APP_NAME=$1
APP_NAME="$(tr '[:lower:]' '[:upper:]' <<< ${APP_NAME:0:1})${APP_NAME:1}"
APP_NAME=${APP_NAME}App
PKG_NAME="com.demo.$1"
CMD="curl https://start.spring.io/starter.tgz -d applicationName=$APP_NAME -d artifactId=$1 -d name=$1 -d packageName=$PKG_NAME -d baseDir=$1 -d dependencies=$2"
echo "Executing $CMD | tar -xf -"
$CMD | tar -xf -




#! /bin/bash
## This startup script runs ON the compute vm

BUCKET_NAME=your-unique-bucket-name
JAR_NAME=gcedeploy-0.0.1-SNAPSHOT.jar
sudo su -
echo "deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main" | tee /etc/apt/sources.list.d/webupd8team-java.list
echo "deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main" | tee -a /etc/apt/sources.list.d/webupd8team-java.list
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886
apt-get update
echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections
apt-get install oracle-java8-installer -y
mkdir /opt/gcedeploy
gsutil cp gs://${BUCKET_NAME}/${JAR_NAME} /opt/gcedeploy/${JAR_NAME}
java -jar /opt/gcedeploy/${JAR_NAME} &
exit


#! /bin/bash
BUCKET_NAME=your-unique-bucket-name

JAR_NAME=gcedeploy-0.0.1-SNAPSHOT.jar
VM_NAME=gcedeploy
gsutil mb gs://${BUCKET_NAME}
gsutil cp ./target/${JAR_NAME} gs://${BUCKET_NAME}/${JAR_NAME}
gcloud compute firewall-rules create ${VM_NAME}-www --allow tcp:80 --target-tags ${VM_NAME}
gcloud compute instances create ${VM_NAME} \
  --tags ${VM_NAME} \
  --zone us-central1-a  --machine-type n1-standard-1 \
  --metadata-from-file startup-script=install.sh
  
   chmod 755 start.sh
   ./start.sh
   
   http://<vm ip address>
   
#! /bin/bash
VM_NAME=gcedeploy

gcloud compute firewall-rules delete --quiet ${VM_NAME}-www
gcloud compute instances delete --quiet --zone=us-central1-a ${VM_NAME}

chmod 755 stop.sh
./stop.sh



